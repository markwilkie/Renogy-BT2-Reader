//#include "Arduino.h"

/*
static const uint16_t MODBUS_TABLE_8005[256] = {
	0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
	0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
	0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
	0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
	0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
	0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
	0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
	0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
	0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
	0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
	0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
	0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
	0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
	0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
	0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
	0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
	0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
	0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
	0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
	0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
	0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
	0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
	0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
	0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
	0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
	0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
	0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
	0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
	0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
	0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
	0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
	0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
};



static const uint16_t MODBUS_TABLE_A001[256] = {
	0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
	0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
	0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
	0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
	0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
	0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
	0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
	0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
	0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
	0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
	0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
	0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
	0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
	0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
	0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
	0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
	0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
	0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
	0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
	0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
	0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
	0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
	0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
	0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
	0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
	0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
	0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
	0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
	0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
	0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
	0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040 };








#define RENOGY_BYTES					0
#define RENOGY_DECIMAL					1
#define RENOGY_CHARS					2
#define RENOGY_VOLTS					3
#define RENOGY_AMPS						4
#define RENOGY_AMP_HOURS				5
#define RENOGY_BIT_FLAGS				6
#define RENOGY_OPTIONS					7
#define RENOGY_COEFFICIENT				8
#define RENOGY_TEMPERATURE				9


#define RENOGY_PRODUCT_MODEL			0x000C
#define RENOGY_SOFTWARE_VERSION			0x0014
#define RENOGY_HARDWARE_VERSION			0x0016
#define RENOGY_SERIAL_NUMBER			0x0018
#define RENOGY_CONTROLLER_ADDRESS		0x001A

#define RENOGY_AUX_BATT_SOC				0x0100
#define RENOGY_AUX_BATT_VOLTAGE			0x0101
#define RENOGY_MAX_CHARGE_CURRENT		0x0102
#define RENOGY_AUX_BATT_TEMPERATURE		0x0103

#define RENOGY_ALTERNATOR_VOLTAGE		0x0104
#define RENOGY_ALTERNATOR_CURRENT		0x0105
#define RENOGY_ALTERNATOR_POWER			0x0106

#define RENOGY_SOLAR_VOLTAGE			0x0107
#define RENOGY_SOLAR_CURRENT			0x0108
#define RENOGY_SOLAR_POWER				0x0109

#define RENOGY_AUX_BATT_LOW_VOLTAGE		0x010B
#define RENOGY_AUX_BATT_HIGH_VOLTAGE	0x010C

#define RENOGY_TODAY_HIGHEST_CURRENT	0x010D
#define RENOGY_TODAY_HIGHEST_POWER		0x010F
#define RENOGY_TODAY_AMP_HOURS			0x0111
#define RENOGY_TODAY_POWER				0x0113
#define RENOGY_CHARGING_MODE			0x0120
#define RENOGY_ERROR_FLAGS_1			0x0121
#define RENOGY_ERROR_FLAGS_2			0x0122

#define RENOGY_AUX_BATT_CAPACITY		0xE002
#define RENOGY_AUX_BATT_TYPE			0xE004
#define REGISTER_DESCRIPTION_UNKNOWN			0xFFFE

	
struct RENOGY_COMMANDS {
	uint16_t startRegister;
	uint16_t numberOfRegisters;
};

const RENOGY_COMMANDS renogyCommands[8] = {
	{0x000C, 2},												// Startup; this is always the first command send on connection
	{0x000C, 8},												// Product model
	{0x0014, 4},												// Software, hardware version
	{0x0018, 3},												// Serial number, unit address
	{0x0100, 7},												// Aux batt, alternator
	{0x0107, 4},												// solar
	{0x0120, 3},												// flags for charging state, error condition
	{0xE001, 0x21}												// battery type and other settings
};

struct REGISTER_DESCRIPTION {
	uint16_t address;
	uint8_t bytesUsed;
	const char * name;
	uint8_t type;
	float multiplier;
};

const REGISTER_DESCRIPTION renogyregisterDescription[] = {
	{RENOGY_PRODUCT_MODEL, 16, "Product model", RENOGY_CHARS, 1},
	{RENOGY_SOFTWARE_VERSION, 4, "Software version", RENOGY_BYTES, 1},
	{RENOGY_HARDWARE_VERSION, 4, "Hardware version", RENOGY_BYTES, 1},
	{RENOGY_SERIAL_NUMBER, 4, "Serial number", RENOGY_BYTES, 1},
	{RENOGY_CONTROLLER_ADDRESS, 2, "Controller address", RENOGY_BYTES, 1},
	{RENOGY_AUX_BATT_SOC, 2, "Aux battery SOC\%", RENOGY_DECIMAL, 1},
	{RENOGY_AUX_BATT_VOLTAGE, 2, "Aux battery voltage", RENOGY_VOLTS, 0.1},
	{RENOGY_MAX_CHARGE_CURRENT, 2, "Max charge current", RENOGY_AMPS, 0.01},
	{RENOGY_AUX_BATT_TEMPERATURE, 2, "Aux battery, controller temperature (Celcius)", RENOGY_TEMPERATURE, 1},

	{RENOGY_ALTERNATOR_VOLTAGE, 2, "Alternator voltage", RENOGY_VOLTS, 0.1},
	{RENOGY_ALTERNATOR_CURRENT, 2, "Alternator current", RENOGY_AMPS, 0.01},
	{RENOGY_ALTERNATOR_POWER, 2, "Alternator power (Watts)", RENOGY_DECIMAL, 1},
	{RENOGY_SOLAR_VOLTAGE, 2, "Solar Voltage", RENOGY_VOLTS, 0.1},
	{RENOGY_SOLAR_CURRENT, 2, "Solar current", RENOGY_AMPS, 0.01},
	{RENOGY_SOLAR_POWER, 2, "Solar power (Watts)", RENOGY_DECIMAL, 1},

	{RENOGY_AUX_BATT_LOW_VOLTAGE, 2, "Aux battery low voltage", RENOGY_VOLTS, 0.1},
	{RENOGY_AUX_BATT_HIGH_VOLTAGE, 2, "Aux battery high voltage", RENOGY_VOLTS, 0.1},
	{RENOGY_TODAY_HIGHEST_CURRENT, 2, "Today highest current (Solar+Alternator)", RENOGY_AMPS, 0.01},
	{RENOGY_TODAY_HIGHEST_POWER, 2, "Today highest power (Watts)", RENOGY_DECIMAL, 1},

	{RENOGY_TODAY_AMP_HOURS, 2, "Today Amp Hours", RENOGY_DECIMAL, 1},
	{RENOGY_TODAY_POWER, 2, "Today Watt Hours", RENOGY_DECIMAL, 1},
	{RENOGY_CHARGING_MODE, 2, "Renogy charging mode", RENOGY_OPTIONS, 1},
	{RENOGY_ERROR_FLAGS_1, 2, "Renogy error codes 1", RENOGY_BIT_FLAGS, 1},
	{RENOGY_ERROR_FLAGS_2, 2, "Renogy error codes 2", RENOGY_BIT_FLAGS, 1},
	
	{RENOGY_AUX_BATT_CAPACITY, 2, "Aux battery capacity (Amp Hours)", RENOGY_DECIMAL, 1},
	{RENOGY_AUX_BATT_TYPE, 2, "Aux battery chemistry", RENOGY_OPTIONS, 1}


};

struct RENOGY_BIT_FLAG_TABLE {
	int registerAddress;
	int bit;
	const char * bitName;
};

const RENOGY_BIT_FLAG_TABLE renogyBitFlags[] {
	{RENOGY_ERROR_FLAGS_1, 11, "Aux batt low temperature" },
	{RENOGY_ERROR_FLAGS_1, 10, "Aux batt overcharge protection" },
	{RENOGY_ERROR_FLAGS_1, 9, "Starter batt reverse polarity" },
	{RENOGY_ERROR_FLAGS_1, 8, "Alternator input overvoltage" },
	{RENOGY_ERROR_FLAGS_1, 5, "Alternator input overcurrent" },
	{RENOGY_ERROR_FLAGS_1, 4, "Controller overtemperature" },
	
	{RENOGY_ERROR_FLAGS_2, 12, "Solar reverse polarity" },
	{RENOGY_ERROR_FLAGS_2, 9, "Solar input overvoltage" },
	{RENOGY_ERROR_FLAGS_2, 7, "Solar input overcurrent" },
	{RENOGY_ERROR_FLAGS_2, 5, "Controller overtemperature" },
	{RENOGY_ERROR_FLAGS_2, 2, "Aux batt undervoltage" },
	{RENOGY_ERROR_FLAGS_2, 1, "Aux batt overvoltage" },
	{RENOGY_ERROR_FLAGS_2, 0, "Aux batt overdischarged" }


};

struct RENOGY_OPTIONS_TABLE {
	int registerAddress;
	int option;
	const char * optionName;
};

const RENOGY_OPTIONS_TABLE renogyOptions[] {
	{RENOGY_CHARGING_MODE, 0, "No charging activated" },
	{RENOGY_CHARGING_MODE, 1, "Reserved" },
	{RENOGY_CHARGING_MODE, 2, "MPPT charging (solar)" },
	{RENOGY_CHARGING_MODE, 3, "Equalization charging (Solar/Alternator)" },
	{RENOGY_CHARGING_MODE, 4, "Boost charging (Solar/Alternator)" },
	{RENOGY_CHARGING_MODE, 5, "Float charging (Solar/Alternator)" },
	{RENOGY_CHARGING_MODE, 6, "Current limted charging (Solar/Alternator)" },
	{RENOGY_CHARGING_MODE, 7, "Reserved" },
	{RENOGY_CHARGING_MODE, 8, "Direct charging (Alternator)" },

	{RENOGY_AUX_BATT_TYPE, 0, "User mode" },
	{RENOGY_AUX_BATT_TYPE, 1, "Open cell Lead Acid" },
	{RENOGY_AUX_BATT_TYPE, 8, "Sealed Lead Acid" },
	{RENOGY_AUX_BATT_TYPE, 8, "AGM Lead Acid" },
	{RENOGY_AUX_BATT_TYPE, 8, "Lithium Iron Phosphate" }
};

*/
